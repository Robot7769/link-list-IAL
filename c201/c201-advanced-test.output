Jednosměrně vázaný lineární seznam
==================================

[TEST01]
Inicializace seznamu
~~~~~~~~~~~~~~~~~~~~
-----------------
-----------------

[TEST02]
Pokus o volání List_GetFirst nad prázdným seznamem => chyba
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*ERROR* The program has performed an illegal operation.
Operace List_GetFirst volala funkci Error.

[TEST03]
Zavoláme 4x operaci List_InsertFirst.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-----------------
	 1
-----------------
-----------------
	 2
	 1
-----------------
-----------------
	 3
	 2
	 1
-----------------
-----------------
	 4
	 3
	 2
	 1
-----------------

[TEST04]
Seznam je neaktivní -- ověříme si to voláním funce List_IsActive.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Operace List_IsActive vrací 0.

[TEST05]
Otestujeme funkci List_First při neaktivním seznamu a funkci List_IsActive.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-----------------
	 4	 <= toto je aktivní prvek 
	 3
	 2
	 1
-----------------
Operace List_IsActive vrací 1.

[TEST06]
Test funkce List_GetValue při aktivitě na prvním prvku
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Operace List_GetValue vrací obsah 4.

[TEST07]
Test funkce List_Next -- voláme 3x, aktivita bude na posledním prvku.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-----------------
	 4
	 3	 <= toto je aktivní prvek 
	 2
	 1
-----------------
-----------------
	 4
	 3
	 2	 <= toto je aktivní prvek 
	 1
-----------------
-----------------
	 4
	 3
	 2
	 1	 <= toto je aktivní prvek 
-----------------
Operace List_IsActive vrací 1.

[TEST08]
Aktualizujeme obsah aktivního prvku.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-----------------
	 4
	 3
	 2
	 10	 <= toto je aktivní prvek 
-----------------
Operace List_IsActive vrací 1.
Operace List_GetValue vrací obsah 10.

[TEST09]
Provedeme ještě jednou List_Next -- aktivita se ztratí.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-----------------
	 4
	 3
	 2
	 10
-----------------
Operace List_IsActive vrací 0.

[TEST10]
Pokusíme se o aktualizaci při neaktivním seznamu => nic
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-----------------
	 4
	 3
	 2
	 10
-----------------
Operace List_IsActive vrací 0.

[TEST11]
Pokus o List_GetValue při neaktivním seznamu => ošetřená chyba
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*ERROR* The program has performed an illegal operation.
Operace List_GetValue volala funkci Error.

[TEST12]
Operace List_Next při neaktivním seznamu nesmí zhavarovat.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-----------------
	 4
	 3
	 2
	 10
-----------------
Operace List_IsActive vrací 0.

[TEST13]
Použití operace List_GetFirst při neaktivním seznamu
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Operace List_GetFirst vrací obsah 4.

[TEST14]
Vyzkoušíme operaci List_DeleteFirst při neaktivním seznamu,
přičemž smazaný prvek zase vrátíme zpátky do seznamu.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-----------------
	 3
	 2
	 10
-----------------
-----------------
	 4
	 3
	 2
	 10
-----------------
Operace List_IsActive vrací 0.

[TEST10]
Operace List_First nastaví aktivitu na první prvek.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-----------------
	 4	 <= toto je aktivní prvek 
	 3
	 2
	 10
-----------------
Operace List_IsActive vrací 1.

[TEST11]
List_DeleteFirst aktivního prvku povede ke ztrátě aktivity.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-----------------
	 3
	 2
	 10
-----------------
Operace List_IsActive vrací 0.

[TEST12]
Užitím operací List_First a List_Next nastavíme aktivitu na konec seznamu.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-----------------
	 3	 <= toto je aktivní prvek 
	 2
	 10
-----------------
-----------------
	 3
	 2	 <= toto je aktivní prvek 
	 10
-----------------
-----------------
	 3
	 2
	 10	 <= toto je aktivní prvek 
-----------------
Operace List_IsActive vrací 1.

[TEST13]
Operace List_DeleteAfter při aktivitě na posledním prvku nedělá nic.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-----------------
	 3
	 2
	 10	 <= toto je aktivní prvek 
-----------------
Operace List_IsActive vrací 1.

[TEST14]
Nastavíme aktivitu na začátek a dvakrát zavoláme List_DeleteAfter.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-----------------
	 3	 <= toto je aktivní prvek 
	 2
	 10
-----------------
Operace List_IsActive vrací 1.
-----------------
	 3	 <= toto je aktivní prvek 
	 10
-----------------
-----------------
	 3	 <= toto je aktivní prvek 
-----------------
Operace List_IsActive vrací 1.

[TEST15]
Otestujeme List_InsertFirst při seznamu s jediným prvkem, nastavíme
aktivitu na nově vložený prvek a opět posuneme aktivitu na konec
seznamu.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-----------------
	 101
	 3	 <= toto je aktivní prvek 
-----------------
-----------------
	 101	 <= toto je aktivní prvek 
	 3
-----------------
-----------------
	 101
	 3	 <= toto je aktivní prvek 
-----------------
Operace List_IsActive vrací 1.

[TEST16]
Operací List_InsertAfter vložíme nový prvek za poslední prvek seznamu.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-----------------
	 101
	 3	 <= toto je aktivní prvek 
	 102
-----------------
Operace List_IsActive vrací 1.

[TEST17]
Nastavíme aktivitu na první prvek seznamu a vyzkoušíme List_InsertAfter.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-----------------
	 101	 <= toto je aktivní prvek 
	 3
	 102
-----------------
-----------------
	 101	 <= toto je aktivní prvek 
	 103
	 3
	 102
-----------------
Operace List_IsActive vrací 1.

[TEST18]
Otestujeme funkčnost operace List_Dispose.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-----------------
-----------------

[TEST24]

Následuje testování operací při prázdném seznamu
================================================
Operace List_IsActive vrací 0.

[TEST25]
List_DeleteFirst při prázdném seznamu => nic
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-----------------
-----------------

[TEST26]
Test List_DeleteAfter při prázdném seznamu => nic 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
-----------------
-----------------

[TEST27]
Ještě jednou List_Dispose => žádná změna
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-----------------
-----------------

[TEST28]
List_First ani List_InsertAfter nad prázdným seznamem nic nedělá.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-----------------
-----------------
-----------------
-----------------

[TEST29]
List_GetValue a List_GetFirst nad prázdným seznamem => ošetřená chyba
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*ERROR* The program has performed an illegal operation.
Operace List_GetValue volala funkci Error.
*ERROR* The program has performed an illegal operation.
Operace List_GetFirst volala funkci Error.

[TEST30]
List_SetValue ani List_Next by neměly mít nad prázdným seznamem žádny efekt.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-----------------
-----------------
-----------------
-----------------
Operace List_IsActive vrací 0.

----------------------- konec příkladu c201 -------------------------
